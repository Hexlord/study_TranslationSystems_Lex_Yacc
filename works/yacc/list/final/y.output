Nonterminals useless in grammar

   signed


Rules useless in grammar

   30 signed: '-' number
   31       | number


State 24 conflicts: 1 shift/reduce
State 30 conflicts: 2 shift/reduce
State 33 conflicts: 2 shift/reduce
State 34 conflicts: 1 shift/reduce
State 37 conflicts: 2 shift/reduce
State 38 conflicts: 2 shift/reduce


Grammar

    0 $accept: line $end

    1 line: statement
    2     | line statement
    3     | line '\n'

    4 statement: left '=' right

    5 right: right_elem
    6      | right right_elem

    7 right_elem: DOUBLE_PLUS
    8           | DOUBLE_MINUS
    9           | op
   10           | number
   11           | '&' id
   12           | '*' id
   13           | id
   14           | '('
   15           | ')'

   16 op: '+'
   17   | '-'
   18   | '*'
   19   | '/'

   20 left: INT '*' ' ' id
   21     | '*' id
   22     | INT ' ' id
   23     | id '[' number ']'
   24     | id

   25 id: LETTER
   26   | id LETTER
   27   | id DIGIT

   28 number: DIGIT
   29       | number DIGIT


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 3
' ' (32) 20 22
'&' (38) 11
'(' (40) 14
')' (41) 15
'*' (42) 12 18 20 21
'+' (43) 16
'-' (45) 17
'/' (47) 19
'=' (61) 4
'[' (91) 23
']' (93) 23
error (256)
DIGIT (258) 27 28 29
LETTER (259) 25 26
INT (260) 20 22
DOUBLE_PLUS (261) 7
DOUBLE_MINUS (262) 8


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
line (21)
    on left: 1 2 3, on right: 0 2 3
statement (22)
    on left: 4, on right: 1 2
right (23)
    on left: 5 6, on right: 4 6
right_elem (24)
    on left: 7 8 9 10 11 12 13 14 15, on right: 5 6
op (25)
    on left: 16 17 18 19, on right: 9
left (26)
    on left: 20 21 22 23 24, on right: 4
id (27)
    on left: 25 26 27, on right: 11 12 13 20 21 22 23 24 26 27
number (28)
    on left: 28 29, on right: 10 23 29


State 0

    0 $accept: . line $end

    LETTER  shift, and go to state 1
    INT     shift, and go to state 2
    '*'     shift, and go to state 3

    line       go to state 4
    statement  go to state 5
    left       go to state 6
    id         go to state 7


State 1

   25 id: LETTER .

    $default  reduce using rule 25 (id)


State 2

   20 left: INT . '*' ' ' id
   22     | INT . ' ' id

    '*'  shift, and go to state 8
    ' '  shift, and go to state 9


State 3

   21 left: '*' . id

    LETTER  shift, and go to state 1

    id  go to state 10


State 4

    0 $accept: line . $end
    2 line: line . statement
    3     | line . '\n'

    $end    shift, and go to state 11
    LETTER  shift, and go to state 1
    INT     shift, and go to state 2
    '\n'    shift, and go to state 12
    '*'     shift, and go to state 3

    statement  go to state 13
    left       go to state 6
    id         go to state 7


State 5

    1 line: statement .

    $default  reduce using rule 1 (line)


State 6

    4 statement: left . '=' right

    '='  shift, and go to state 14


State 7

   23 left: id . '[' number ']'
   24     | id .
   26 id: id . LETTER
   27   | id . DIGIT

    DIGIT   shift, and go to state 15
    LETTER  shift, and go to state 16
    '['     shift, and go to state 17

    $default  reduce using rule 24 (left)


State 8

   20 left: INT '*' . ' ' id

    ' '  shift, and go to state 18


State 9

   22 left: INT ' ' . id

    LETTER  shift, and go to state 1

    id  go to state 19


State 10

   21 left: '*' id .
   26 id: id . LETTER
   27   | id . DIGIT

    DIGIT   shift, and go to state 15
    LETTER  shift, and go to state 16

    $default  reduce using rule 21 (left)


State 11

    0 $accept: line $end .

    $default  accept


State 12

    3 line: line '\n' .

    $default  reduce using rule 3 (line)


State 13

    2 line: line statement .

    $default  reduce using rule 2 (line)


State 14

    4 statement: left '=' . right

    DIGIT         shift, and go to state 20
    LETTER        shift, and go to state 1
    DOUBLE_PLUS   shift, and go to state 21
    DOUBLE_MINUS  shift, and go to state 22
    '&'           shift, and go to state 23
    '*'           shift, and go to state 24
    '('           shift, and go to state 25
    ')'           shift, and go to state 26
    '+'           shift, and go to state 27
    '-'           shift, and go to state 28
    '/'           shift, and go to state 29

    right       go to state 30
    right_elem  go to state 31
    op          go to state 32
    id          go to state 33
    number      go to state 34


State 15

   27 id: id DIGIT .

    $default  reduce using rule 27 (id)


State 16

   26 id: id LETTER .

    $default  reduce using rule 26 (id)


State 17

   23 left: id '[' . number ']'

    DIGIT  shift, and go to state 20

    number  go to state 35


State 18

   20 left: INT '*' ' ' . id

    LETTER  shift, and go to state 1

    id  go to state 36


State 19

   22 left: INT ' ' id .
   26 id: id . LETTER
   27   | id . DIGIT

    DIGIT   shift, and go to state 15
    LETTER  shift, and go to state 16

    $default  reduce using rule 22 (left)


State 20

   28 number: DIGIT .

    $default  reduce using rule 28 (number)


State 21

    7 right_elem: DOUBLE_PLUS .

    $default  reduce using rule 7 (right_elem)


State 22

    8 right_elem: DOUBLE_MINUS .

    $default  reduce using rule 8 (right_elem)


State 23

   11 right_elem: '&' . id

    LETTER  shift, and go to state 1

    id  go to state 37


State 24

   12 right_elem: '*' . id
   18 op: '*' .

    LETTER  shift, and go to state 1

    LETTER    [reduce using rule 18 (op)]
    $default  reduce using rule 18 (op)

    id  go to state 38


State 25

   14 right_elem: '(' .

    $default  reduce using rule 14 (right_elem)


State 26

   15 right_elem: ')' .

    $default  reduce using rule 15 (right_elem)


State 27

   16 op: '+' .

    $default  reduce using rule 16 (op)


State 28

   17 op: '-' .

    $default  reduce using rule 17 (op)


State 29

   19 op: '/' .

    $default  reduce using rule 19 (op)


State 30

    4 statement: left '=' right .
    6 right: right . right_elem

    DIGIT         shift, and go to state 20
    LETTER        shift, and go to state 1
    DOUBLE_PLUS   shift, and go to state 21
    DOUBLE_MINUS  shift, and go to state 22
    '&'           shift, and go to state 23
    '*'           shift, and go to state 24
    '('           shift, and go to state 25
    ')'           shift, and go to state 26
    '+'           shift, and go to state 27
    '-'           shift, and go to state 28
    '/'           shift, and go to state 29

    LETTER    [reduce using rule 4 (statement)]
    '*'       [reduce using rule 4 (statement)]
    $default  reduce using rule 4 (statement)

    right_elem  go to state 39
    op          go to state 32
    id          go to state 33
    number      go to state 34


State 31

    5 right: right_elem .

    $default  reduce using rule 5 (right)


State 32

    9 right_elem: op .

    $default  reduce using rule 9 (right_elem)


State 33

   13 right_elem: id .
   26 id: id . LETTER
   27   | id . DIGIT

    DIGIT   shift, and go to state 15
    LETTER  shift, and go to state 16

    DIGIT     [reduce using rule 13 (right_elem)]
    LETTER    [reduce using rule 13 (right_elem)]
    $default  reduce using rule 13 (right_elem)


State 34

   10 right_elem: number .
   29 number: number . DIGIT

    DIGIT  shift, and go to state 40

    DIGIT     [reduce using rule 10 (right_elem)]
    $default  reduce using rule 10 (right_elem)


State 35

   23 left: id '[' number . ']'
   29 number: number . DIGIT

    DIGIT  shift, and go to state 40
    ']'    shift, and go to state 41


State 36

   20 left: INT '*' ' ' id .
   26 id: id . LETTER
   27   | id . DIGIT

    DIGIT   shift, and go to state 15
    LETTER  shift, and go to state 16

    $default  reduce using rule 20 (left)


State 37

   11 right_elem: '&' id .
   26 id: id . LETTER
   27   | id . DIGIT

    DIGIT   shift, and go to state 15
    LETTER  shift, and go to state 16

    DIGIT     [reduce using rule 11 (right_elem)]
    LETTER    [reduce using rule 11 (right_elem)]
    $default  reduce using rule 11 (right_elem)


State 38

   12 right_elem: '*' id .
   26 id: id . LETTER
   27   | id . DIGIT

    DIGIT   shift, and go to state 15
    LETTER  shift, and go to state 16

    DIGIT     [reduce using rule 12 (right_elem)]
    LETTER    [reduce using rule 12 (right_elem)]
    $default  reduce using rule 12 (right_elem)


State 39

    6 right: right right_elem .

    $default  reduce using rule 6 (right)


State 40

   29 number: number DIGIT .

    $default  reduce using rule 29 (number)


State 41

   23 left: id '[' number ']' .

    $default  reduce using rule 23 (left)
